/********************************************************************
*                      К  У  Р  С  Ы     С  +  +                   *
*------------------------------------------------------------------*
* Project Type  : Win32 Console Application                        *
* Project Name  :C:\Users\bokar\source\repos\Лекции_По_ООП
* File Name     : Point05_02.CPP                                   *
* Programmer(s) : Чечиков Ю.Б.  &  Безродных И.П.  &  Бокарев С.М. *
* Modifyed By   : Бокарев С.М.                                     *
* Created       : 26/04/04                                         *
* Last Revision : 27/02/22                                         *
* Comment(s)    : РЕАЛИЗАЦИЯ ДВУХ КЛАССОВ. НАСЛЕДОВАНИЕ            *
*                                                                  *
********************************************************************/
#include <Windows.h> // для работы с графикой
#include "Point05_02.h"

//HWND   hwnd;     //  Объявим дескриптор (описатель) окна
extern HDC    hdc;      // объявим  контекст устройства модификатор extern - внешнее объявление в другом файле

/*------------------------------------------------------------------*/
/*                 Р Е А Л И З А Ц И Я    М Е Т О Д О В             */
/*------------------------------------------------------------------*/

/*----------------------------------------*/
/*        МЕТОДЫ КЛАССА Location          */
/*----------------------------------------*/
Location::Location(int InitX, int InitY) // конструктор Location()
{
	X = InitX;
	Y = InitY;
};// конструктор Location()

Location::~Location(void)  // деструктор ~Location() 
{
	//формально пустое тело
};// деструктор ~Location()

int Location::GetX(void) { return X; }; // получить значение Х
int Location::GetY(void) { return Y; }; // получить значение У


/*----------------------------------------*/
/*        МЕТОДЫ КЛАССА Point             */
/*----------------------------------------*/
Point::Point(int InitX, int InitY) : Location(InitX, InitY) // конструктор Point()
{
	Visible = false; // то поле, которое не знал предок Point
}// конструктор Point()

Point::~Point(void) // деструктор ~Point()   
{
	//формально пустое тело
}// деструктор ~Point()


void Point::Show(void) 
{
	// показать 4 точки на экране
	Visible = true; // точку видно
	SetPixel(hdc, X    , Y, RGB(255, 0, 0));   // рисуем установленным цветом пиксель на консоли красная точка активная
	SetPixel(hdc, X + 1, Y, RGB(255, 0, 0));   // красный цвет - точка активная
	SetPixel(hdc, X    , Y + 1, RGB(255, 0, 0));   // красный цвет - точка активная
	SetPixel(hdc, X + 1, Y + 1, RGB(255, 0, 0));   // красный цвет - точка активная
	//Sleep(3000); //для отладки
} // Show()


void Point::Hide(void) // скрыть точку на экране
{
	Visible = false;
	SetPixel(hdc, X, Y, RGB(0, 0, 255)); //рисуем цветом синего
	SetPixel(hdc, X + 1, Y, RGB(0, 0, 255));   // синий цвет - точка активная
	SetPixel(hdc, X, Y + 1, RGB(0, 0, 255));   // синий цвет - точка активная
	SetPixel(hdc, X + 1, Y + 1, RGB(0, 0, 255));   // синий цвет - точка активная
} // Hide()

//--------------------------------------------------------------
bool Point::IsVisible(void) { return Visible; };

//--------------------------------------------------------------
void Point::MoveTo(int NewX, int NewY) // переместить точку по координатам
{
	Hide();  //сделать точку невидимой по текущим координатам
	X = NewX; //поменять координаты точки
	Y = NewY; //поменять координаты точки
	Show();  //показать точку на новом месте
}; // MoveTo()